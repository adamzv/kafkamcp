name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run tests
        run: ./mvnw -B -ntp clean test

  build-jvm:
    name: Build and Push JVM Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for JVM image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,enable={{is_default_branch}}
            type=sha,enable=${{ github.event_name == 'pull_request' }},prefix=pr-${{ github.event.pull_request.number }}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push JVM image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-native:
    name: Build and Push Native Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Native image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-native
            type=ref,event=pr,suffix=-native
            type=semver,pattern={{version}},suffix=-native
            type=semver,pattern={{major}}.{{minor}},suffix=-native
            type=semver,pattern={{major}},suffix=-native
            type=sha,enable={{is_default_branch}},suffix=-native
            type=sha,enable=${{ github.event_name == 'pull_request' }},prefix=pr-${{ github.event.pull_request.number }}-,suffix=-native
            type=raw,value=native,enable={{is_default_branch}}

      - name: Build and push Native image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.native
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-jvm, build-native]
    if: always()
    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.build-jvm.result }}" == "success" ]] && [[ "${{ needs.build-native.result }}" == "success" ]]; then
            echo "✅ All Docker images built successfully"
          else
            echo "❌ Some builds failed:"
            echo "  JVM build: ${{ needs.build-jvm.result }}"
            echo "  Native build: ${{ needs.build-native.result }}"
            exit 1
          fi
